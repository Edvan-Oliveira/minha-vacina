{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Pedro Felipe\\\\Desktop\\\\TCC-Minha Vacina\\\\minha-vacina-app\\\\src\\\\screens\\\\login\\\\login.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { styles } from \"../../styles/styleLoginCadastro\";\nimport { InputCampo, InputSenha } from \"../../components/input\";\nimport { ButtonLogin } from \"../login/button\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { ModalSenha } from \"../../components/modal\";\nimport { useState } from \"react\";\nexport function LoginScreen(props) {\n  var _this = this;\n\n  function logar(_ref) {\n    var email, senha;\n    return _regeneratorRuntime.async(function logar$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref.email, senha = _ref.senha;\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalSelecionado = _useState2[0],\n      setModalSelecionado = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mostrarSenha = _useState4[0],\n      setMostrarSenha = _useState4[1];\n\n  var alternar = function alternar() {\n    setMostrarSenha(!mostrarSenha);\n  };\n\n  var nav = useNavigation();\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.logoApp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"Logo Minha Vacina\")), React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      senha: \"\"\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string().required(\"Campo e-mail obrigatório\").email(\"Email inválido\").max(30, \"Máximo 30 caracteres\"),\n      senha: Yup.string().required(\"Campo senha obrigatório\").min(8, \"Mínimo 8 caracteres\").max(20, \"Máximo 20 caracteres\")\n    }),\n    onSubmit: logar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleSubmit = _ref2.handleSubmit,\n        errors = _ref2.errors,\n        isSubmitting = _ref2.isSubmitting,\n        touched = _ref2.touched,\n        handleBlur = _ref2.handleBlur;\n    return React.createElement(View, {\n      style: styles.conteinerFormLogin,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, React.createElement(InputCampo, {\n      placeholder: \"Digite seu e-mail\",\n      icone: \"email\",\n      tipoTeclado: \"email-address\",\n      onChangeText: handleChange(\"email\"),\n      onBlur: function onBlur() {\n        return handleBlur(\"email\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }), touched.email && React.createElement(Text, {\n      style: styles.erro,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 31\n      }\n    }, errors.email), React.createElement(InputSenha, {\n      placeholder: \"Digite sua senha\",\n      secureText: mostrarSenha,\n      onChangeText: handleChange(\"senha\"),\n      onBlur: function onBlur() {\n        return handleBlur(\"senha\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }), touched.senha && React.createElement(Text, {\n      style: styles.erro,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 31\n      }\n    }, errors.senha), React.createElement(View, {\n      style: styles.btnVerSenha,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, React.createElement(Switch, {\n      onValueChange: alternar,\n      value: mostrarSenha,\n      trackColor: {\n        true: '#12963C',\n        false: '#bbbbbb'\n      },\n      thumbColor: mostrarSenha ? '#12963C' : '#bbbbbb',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }), React.createElement(Text, {\n      style: styles.textoExibirsenha,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, \"Exibir senha\")), React.createElement(ModalSenha, {\n      titulo: \"Restaurar senha\",\n      visivel: modalSelecionado,\n      onCancelar: function onCancelar() {\n        return setModalSelecionado(!modalSelecionado);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }, React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 19\n      }\n    }, \"Ser\\xE1 enviado uma nova senha aleat\\xF3ria para seu e-mail.\"), React.createElement(InputCampo, {\n      placeholder: \"Digite seu e-mail\",\n      icone: \"email\",\n      tipoTeclado: \"email-address\",\n      onChangeText: handleChange(\"email\"),\n      onBlur: function onBlur() {\n        return handleBlur(\"email\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 19\n      }\n    }))), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return setModalSelecionado(!modalSelecionado);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.textEsqueceuSenha,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, \"Esqueceu sua senha?\")), isSubmitting && React.createElement(ActivityIndicator, {\n      style: styles.carregando,\n      size: \"small\",\n      color: \"white\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    }), !isSubmitting && React.createElement(ButtonLogin, {\n      titulo: \"Entrar\",\n      onPress: function onPress() {\n        return handleSubmit();\n      },\n      estilo: styles.btnLogin,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    }), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return nav.navigate(\"cadastro\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.textContaLoginCadastrar,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 15\n      }\n    }, \"Ainda n\\xE3o possuo uma conta!\")));\n  }));\n}","map":{"version":3,"sources":["C:/Users/Pedro Felipe/Desktop/TCC-Minha Vacina/minha-vacina-app/src/screens/login/login.tsx"],"names":["React","Formik","Yup","styles","InputCampo","InputSenha","ButtonLogin","useNavigation","ModalSenha","useState","LoginScreen","props","logar","email","senha","modalSelecionado","setModalSelecionado","mostrarSenha","setMostrarSenha","alternar","nav","logoApp","object","shape","string","required","max","min","handleChange","handleSubmit","errors","isSubmitting","touched","handleBlur","conteinerFormLogin","erro","btnVerSenha","true","false","textoExibirsenha","textEsqueceuSenha","carregando","btnLogin","navigate","textContaLoginCadastrar"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StatusBar,\r\n  ActivityIndicator,\r\n  TouchableOpacity,\r\n  Switch,\r\n} from \"react-native\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { styles } from \"../../styles/styleLoginCadastro\";\r\nimport { InputCampo, InputSenha } from \"../../components/input\";\r\nimport { ButtonLogin } from \"../login/button\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { ModalSenha } from \"../../components/modal\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\n\r\nexport interface LoginScreenProps {}\r\n\r\nexport function LoginScreen(props: LoginScreenProps) {\r\n\r\n  async function logar({email, senha}){\r\n  }\r\n  //Estado de selação modal\r\n  const [modalSelecionado, setModalSelecionado] = useState(false)\r\n\r\n  const [mostrarSenha, setMostrarSenha] = useState(true)\r\n\r\n  const alternar = () => {\r\n    setMostrarSenha(!mostrarSenha)\r\n  }\r\n  \r\n  const nav = useNavigation()\r\n\r\n  return (\r\n    <View>\r\n      <StatusBar />\r\n      <View style={styles.logoApp}>\r\n        <Text>Logo Minha Vacina</Text>\r\n      </View>\r\n      <Formik\r\n        initialValues={{\r\n          email: \"\",\r\n          senha: \"\",\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          email: Yup.string()\r\n            .required(\"Campo e-mail obrigatório\")\r\n            .email(\"Email inválido\")\r\n            .max(30, \"Máximo 30 caracteres\"),\r\n          senha: Yup.string()\r\n            .required(\"Campo senha obrigatório\")\r\n            .min(8, \"Mínimo 8 caracteres\")\r\n            .max(20, \"Máximo 20 caracteres\"),\r\n        })}\r\n        onSubmit={logar}\r\n      >\r\n        {({\r\n          handleChange,\r\n          handleSubmit,\r\n          errors,\r\n          isSubmitting,\r\n          touched,\r\n          handleBlur,\r\n        }) => (\r\n          <View style={styles.conteinerFormLogin}>\r\n            <InputCampo\r\n              placeholder=\"Digite seu e-mail\"\r\n              icone=\"email\"\r\n              tipoTeclado=\"email-address\"\r\n              onChangeText={handleChange(\"email\")}\r\n              onBlur={() => handleBlur(\"email\")}\r\n            />\r\n            {touched.email && <Text style={styles.erro}>{errors.email}</Text>}\r\n            \r\n            <InputSenha\r\n              placeholder=\"Digite sua senha\"\r\n              secureText={mostrarSenha}\r\n              onChangeText={handleChange(\"senha\")}\r\n              onBlur={() => handleBlur(\"senha\")}\r\n            />\r\n            {touched.senha && <Text style={styles.erro}>{errors.senha}</Text>}\r\n            <View style={styles.btnVerSenha}>\r\n              <Switch\r\n                onValueChange={alternar}\r\n                value={mostrarSenha}\r\n                trackColor={{ true: '#12963C', false: '#bbbbbb' }}\r\n                thumbColor={mostrarSenha ? '#12963C' : '#bbbbbb'}\r\n              />\r\n              <Text style={styles.textoExibirsenha}>Exibir senha</Text>\r\n            </View>\r\n            \r\n              <ModalSenha\r\n                titulo=\"Restaurar senha\"\r\n                visivel={modalSelecionado}\r\n                onCancelar={()=> setModalSelecionado(!modalSelecionado)}\r\n              >\r\n                <View>\r\n                  <Text>Será enviado uma nova senha aleatória para seu e-mail.</Text>\r\n                  <InputCampo\r\n                    placeholder=\"Digite seu e-mail\"\r\n                    icone=\"email\"\r\n                    tipoTeclado=\"email-address\"\r\n                    onChangeText={handleChange(\"email\")}\r\n                    onBlur={() => handleBlur(\"email\")}\r\n                  />  \r\n                </View>\r\n              </ModalSenha>\r\n            \r\n            <TouchableOpacity onPress={() => setModalSelecionado(!modalSelecionado)}>\r\n              <Text style={styles.textEsqueceuSenha}>\r\n                Esqueceu sua senha?\r\n              </Text>\r\n            </TouchableOpacity>\r\n\r\n            {isSubmitting && (\r\n              <ActivityIndicator\r\n                style={styles.carregando}\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            )}\r\n            {!isSubmitting && (\r\n              <ButtonLogin\r\n                titulo=\"Entrar\"\r\n                onPress={() => handleSubmit()}\r\n                estilo={styles.btnLogin}\r\n              />\r\n            )}\r\n            <TouchableOpacity onPress={() => nav.navigate(\"cadastro\")}>\r\n              <Text style={styles.textContaLoginCadastrar}>\r\n                Ainda não possuo uma conta!\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        )}\r\n      </Formik>\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}